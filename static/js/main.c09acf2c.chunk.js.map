{"version":3,"sources":["Card.js","GuessCount.js","HallOfFame.js","HighScoreInput.js","App.js","reportWebVitals.js","index.js"],"names":["Card","card","feedback","index","onClick","className","GuessCount","guesses","HallOfFame","entries","map","date","id","player","HOF_KEY","saveHOFEntry","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","push","splice","length","setItem","stringify","HighScoreInput","state","winner","handleWinnerUpdate","event","setState","target","value","toUpperCase","persistWinner","preventDefault","props","onSubmit","this","type","autoComplete","onChange","Component","App","cards","generateCards","currentPair","matchedCardIndices","restartGame","displayHallOfFame","hallOfFame","handleCardClick","handleNewPairClosedBy","result","candidates","shuffle","SIDE","pop","indexMatched","includes","newPair","newGuesses","matched","setTimeout","won","getFeedbackForCard","Button","variant","size","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c09acf2c.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Card.css'\n\nconst HIDDEN_SYMBOL = '‚ùì'\n\nconst Card = ({ card, feedback, index, onClick }) => (\n    <div className={`card ${feedback}`} onClick={() => onClick(index)}>\n        <span className=\"symbol\">\n            {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\n        </span>\n    </div>\n)\n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    feedback: PropTypes.oneOf([\n        'visible',\n        'hidden',\n        'justMatched',\n        'justMismatched',\n\n    ]).isRequired,\n    index: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nexport default Card","import propTypes from 'prop-types'\nimport React from 'react'\n\nimport './GuessCount.css'\n\nconst GuessCount = ({ guesses }) => <div className=\"guesses\">{guesses}</div>\n\nGuessCount.propTypes = {\n    guesses: propTypes.number.isRequired,\n}\n\n\nexport default GuessCount","import PropTypes from 'prop-types'\nimport React from 'react'\n\nimport './HallOfFame.css'\n\nconst HallOfFame = ({ entries }) => (\n  <table className=\"hallOfFame\">\n    <tbody>\n      {entries.map(({ date, guesses, id, player }) => (\n        <tr key={id}>\n          <td className=\"date\">{date}</td>\n          <td className=\"guesses\">{guesses}</td>\n          <td className=\"player\">{player}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n)\n\nHallOfFame.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      guesses: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      player: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n}\n\nexport default HallOfFame\n\n// == Internal helpers ==============================================\n\nconst HOF_KEY = '::Memory::HallofFame'\nconst HOF_MAX_SIZE = 10\n\nexport function saveHOFEntry(entry, onStored) {\n  entry.date = new Date().toLocaleDateString()\n  entry.id = Date.now()\n\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\n  const insertionPoint = entries.findIndex(\n    ({ guesses }) => guesses >= entry.guesses\n  )\n\n  if (insertionPoint === -1) {\n    entries.push(entry)\n  } else {\n    entries.splice(insertionPoint, 0, entry)\n  }\n  if (entries.length > HOF_MAX_SIZE) {\n    entries.splice(HOF_MAX_SIZE, entries.length)\n  }\n\n  localStorage.setItem(HOF_KEY, JSON.stringify(entries))\n  onStored(entries)\n}","import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nimport './HighScoreInput.css'\n\nimport { saveHOFEntry } from './HallOfFame'\n\nclass HighScoreInput extends Component {\n\n  state = { winner: ''}\n\n  //Arrow fx for binding\n  handleWinnerUpdate = event => {\n    this.setState({ winner: event.target.value.toUpperCase() })\n  }\n\n  //Arrow fx for binding\n  persistWinner =  event => {\n    event.preventDefault()\n    const newEntry = { guesses: this.props.guesses, player: this.state.winner }\n    saveHOFEntry(newEntry, this.props.onStored)\n  }\n\n\n  render() {\n    return (\n      <form className=\"highScoreInput\" onSubmit={this.persistWinner}>\n        <p>\n          <label>\n            Bravo ! Entre ton pr√©nom :\n            <input\n            type=\"text\"\n            autoComplete=\"given-name\"\n            onChange={this.handleWinnerUpdate}\n            value={this.state.winner} \n            />\n          </label>\n          <button type=\"submit\">J‚Äôai gagn√© !</button>\n        </p>\n      </form>\n    )\n  }\n}\n\nHighScoreInput.propTypes = {\n  guesses: PropTypes.number.isRequired,\n  onStored: PropTypes.func.isRequired,\n}\n\nexport default HighScoreInput","import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\nimport Button from 'react-bootstrap/Button';\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\nimport HallOfFame from './HallOfFame'\nimport HighScoreInput from './HighScoreInput'\n\nconst SIDE = 6\nconst SYMBOLS = 'üòÄüéâüíñüé©üê∂üê±ü¶Ñüê¨üåçüëæüéÉüëÄüçéüçåüçìüçêüçüüçø'\nconst VISUAL_PAUSE_MSECS =  750\n\nclass App extends Component {\n  state = {\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    HallOfFame: null,\n    matchedCardIndices: [],\n  }\n\n  restartGame = () => {\n    this.setState({\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    HallOfFame: null,\n    matchedCardIndices: [],\n    })\n  }\n\n  displayHallOfFame = hallOfFame => {\n    this.setState({ hallOfFame })\n  }\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n\n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  //Arrow fx for binding\n  handleCardClick = index => {\n    const { currentPair } = this.state\n\n    if (currentPair.length === 2) {\n      return\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return\n    }\n\n    this.handleNewPairClosedBy(index)\n  }\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    const matched = cards[newPair[0]] === cards[newPair[1]]\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n  }\n\n  render() {\n    const { cards, guesses, hallOfFame, matchedCardIndices } = this.state\n    const won = matchedCardIndices.length === 4 //cards.length\n    return (\n      <div className=\"memory\">\n        <div className=\"header\"><h2>Memory Game</h2></div>\n        <GuessCount guesses={guesses} />\n        {cards.map((card, index) => (\n          <Card\n          card={card}\n          feedback={this.getFeedbackForCard(index)}\n          key={index}\n          index={index}\n          onClick={this.handleCardClick} />\n        ))}\n        { won && (\n          hallOfFame ? (\n          <HallOfFame entries={hallOfFame} />\n        ) : (\n          <HighScoreInput\n           guesses={guesses}\n           onStored={this.displayHallOfFame}\n            />\n        ))}\n        <Button variant=\"outline-secondary\" size=\"sm\" onClick={this.restartGame}>Replay</Button>\n      </div>\n    )\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}